/*
 * Api napisan u swageru
 *
 * Kalkulator api za raƒçunanje cijene struje
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using KalkulatorCijeneStrujeCore.Models;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Rezultati :  IEquatable<Rezultati>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Rezultati" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="ApplicationUserId">ApplicationUserId.</param>
        /// <param name="IznosPotrosnje">IznosPotrosnje.</param>
        /// <param name="Koeficijenti">Koeficijenti.</param>
        /// <param name="Struja">Struja.</param>
        public Rezultati(int? ID = null, string ApplicationUserId = null, double? IznosPotrosnje = null, Koeficijenti Koeficijenti = null, Struja Struja = null)
        {
            this.ID = ID;
            this.ApplicationUserId = ApplicationUserId;
            this.IznosPotrosnje = IznosPotrosnje;
            this.Koeficijenti = Koeficijenti;
            this.Struja = Struja;
            
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID")]
        public int? ID { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationUserId
        /// </summary>
        [DataMember(Name="ApplicationUserId")]
        public string ApplicationUserId { get; set; }
        public virtual ApplicationUser ApplicationUser { get; set; }

        /// <summary>
        /// Gets or Sets IznosPotrosnje
        /// </summary>
        [DataMember(Name="IznosPotrosnje")]
        public double? IznosPotrosnje { get; set; }

        /// <summary>
        /// Gets or Sets Koeficijenti
        /// </summary>
        [DataMember(Name="Koeficijenti")]
        public Koeficijenti Koeficijenti { get; set; }

        /// <summary>
        /// Gets or Sets Struja
        /// </summary>
        [DataMember(Name="Struja")]
        public Struja Struja { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rezultati {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ApplicationUserId: ").Append(ApplicationUserId).Append("\n");
            sb.Append("  IznosPotrosnje: ").Append(IznosPotrosnje).Append("\n");
            sb.Append("  Koeficijenti: ").Append(Koeficijenti).Append("\n");
            sb.Append("  Struja: ").Append(Struja).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Rezultati)obj);
        }

        /// <summary>
        /// Returns true if Rezultati instances are equal
        /// </summary>
        /// <param name="other">Instance of Rezultati to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rezultati other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.ApplicationUserId == other.ApplicationUserId ||
                    this.ApplicationUserId != null &&
                    this.ApplicationUserId.Equals(other.ApplicationUserId)
                ) && 
                (
                    this.IznosPotrosnje == other.IznosPotrosnje ||
                    this.IznosPotrosnje != null &&
                    this.IznosPotrosnje.Equals(other.IznosPotrosnje)
                ) && 
                (
                    this.Koeficijenti == other.Koeficijenti ||
                    this.Koeficijenti != null &&
                    this.Koeficijenti.Equals(other.Koeficijenti)
                ) && 
                (
                    this.Struja == other.Struja ||
                    this.Struja != null &&
                    this.Struja.Equals(other.Struja)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                    if (this.ApplicationUserId != null)
                    hash = hash * 59 + this.ApplicationUserId.GetHashCode();
                    if (this.IznosPotrosnje != null)
                    hash = hash * 59 + this.IznosPotrosnje.GetHashCode();
                    if (this.Koeficijenti != null)
                    hash = hash * 59 + this.Koeficijenti.GetHashCode();
                    if (this.Struja != null)
                    hash = hash * 59 + this.Struja.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Rezultati left, Rezultati right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Rezultati left, Rezultati right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
