/*
 * Api napisan u swageru
 *
 * Kalkulator api za raƒçunanje cijene struje
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Struja :  IEquatable<Struja>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Struja" /> class.
        /// </summary>
        /// <param name="PotrosnjaSkupa">PotrosnjaSkupa.</param>
        /// <param name="PotrosnjaJeftina">PotrosnjaJeftina.</param>
        /// <param name="PDV">PDV.</param>
        /// <param name="Naknada">Naknada.</param>
        public Struja(double? PotrosnjaSkupa = null, double? PotrosnjaJeftina = null, double? PDV = null, double? Naknada = null)
        {
            this.PotrosnjaSkupa = PotrosnjaSkupa;
            this.PotrosnjaJeftina = PotrosnjaJeftina;
            this.PDV = PDV;
            this.Naknada = Naknada;
            
        }
        public int ID { get; set; }

        /// <summary>
        /// Gets or Sets PotrosnjaSkupa
        /// </summary>
        [DataMember(Name="PotrosnjaSkupa")]
        public double? PotrosnjaSkupa { get; set; }

        /// <summary>
        /// Gets or Sets PotrosnjaJeftina
        /// </summary>
        [DataMember(Name="PotrosnjaJeftina")]
        public double? PotrosnjaJeftina { get; set; }

        /// <summary>
        /// Gets or Sets PDV
        /// </summary>
        [DataMember(Name="PDV")]
        public double? PDV { get; set; }

        /// <summary>
        /// Gets or Sets Naknada
        /// </summary>
        [DataMember(Name="Naknada")]
        public double? Naknada { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Struja {\n");
            sb.Append("  PotrosnjaSkupa: ").Append(PotrosnjaSkupa).Append("\n");
            sb.Append("  PotrosnjaJeftina: ").Append(PotrosnjaJeftina).Append("\n");
            sb.Append("  PDV: ").Append(PDV).Append("\n");
            sb.Append("  Naknada: ").Append(Naknada).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Struja)obj);
        }

        /// <summary>
        /// Returns true if Struja instances are equal
        /// </summary>
        /// <param name="other">Instance of Struja to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Struja other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.PotrosnjaSkupa == other.PotrosnjaSkupa ||
                    this.PotrosnjaSkupa != null &&
                    this.PotrosnjaSkupa.Equals(other.PotrosnjaSkupa)
                ) && 
                (
                    this.PotrosnjaJeftina == other.PotrosnjaJeftina ||
                    this.PotrosnjaJeftina != null &&
                    this.PotrosnjaJeftina.Equals(other.PotrosnjaJeftina)
                ) && 
                (
                    this.PDV == other.PDV ||
                    this.PDV != null &&
                    this.PDV.Equals(other.PDV)
                ) && 
                (
                    this.Naknada == other.Naknada ||
                    this.Naknada != null &&
                    this.Naknada.Equals(other.Naknada)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.PotrosnjaSkupa != null)
                    hash = hash * 59 + this.PotrosnjaSkupa.GetHashCode();
                    if (this.PotrosnjaJeftina != null)
                    hash = hash * 59 + this.PotrosnjaJeftina.GetHashCode();
                    if (this.PDV != null)
                    hash = hash * 59 + this.PDV.GetHashCode();
                    if (this.Naknada != null)
                    hash = hash * 59 + this.Naknada.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Struja left, Struja right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Struja left, Struja right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
